// Generated by CoffeeScript 1.3.3
(function() {
  var Future, extend, http, method, request, _i, _len, _ref,
    __slice = [].slice;

  Future = require('fibers/future');

  http = require('http');

  extend = function() {
    var dest, key, s, sources, val, _i, _len;
    dest = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      s = sources[_i];
      for (key in s) {
        val = s[key];
        dest[key] = val;
      }
    }
    return dest;
  };

  exports.request = request = function(options) {
    var f, req, requestBody, timeout;
    if (options == null) {
      options = {};
    }
    f = new Future;
    if (timeout = options.timeout) {
      delete options.timeout;
    }
    if (requestBody = options.body) {
      delete options.body;
    }
    req = http.get(options);
    if (timeout) {
      req.setTimeout(timeout, function() {
        req.end();
        if (!f.isResolved()) {
          return f["throw"](new Error("Http Timeout"));
        }
      });
    }
    req.on('error', function(err) {
      if (!f.isResolved()) {
        return f["throw"](err);
      }
    });
    req.on('response', function(res) {
      var body;
      body = '';
      res.on('close', function(err) {
        if (!f.isResolved()) {
          return f["throw"](err);
        }
      });
      res.on('error', function(err) {
        if (!f.isResolved()) {
          return f["throw"](err);
        }
      });
      res.on('data', function(data) {
        return body += data;
      });
      return res.on('end', function() {
        if (!f.isResolved()) {
          return f["return"](extend({}, res, {
            body: body
          }));
        }
      });
    });
    if (requestBody) {
      req.write(requestBody);
    }
    req.end();
    return f.wait();
  };

  _ref = ['put', 'post', 'delete'];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    method = _ref[_i];
    exports[method] = (function(method) {
      return function(body, options) {
        return request(extend({}, {
          body: body,
          method: method.toUpperCase()
        }, options));
      };
    })(method);
  }

  exports.get = function(options) {
    return request(extend({}, {
      method: 'GET'
    }, options));
  };

}).call(this);
